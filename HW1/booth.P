member([X|_], X).
member([_|T], X) :- member(T, X).

append([],L,L).
append([H|T],L0,[H|L]):-
	append(T,L0,L).

sumlist([X],X).
sumlist([X|T], Y):-
	sumlist(T,ST),
	Y is ST+X.

remove(X,[X|T],T).
remove(X,[H|T],[H|L1]) :- remove(X,T,L1).

initialize_pos(BID,Pos,Pos):-
	booths(Count),
	BID>Count.
initialize_pos(BID,PosBefore,Pos):-
	booths(Count),
	BID=<Count,
	position(BID,X,Y),
	New_BID is BID+1,
	initialize_pos(New_BID,[[BID,X,Y]|PosBefore],Pos).

initialize_dim(BID,Dims,Dims):-
	booths(Count),
	BID>Count.

initialize_dim(BID,DimsBefore,Dims):-
	booths(Count),
	BID=<Count,
	dimension(BID,X,Y),
	New_BID is BID+1,
	initialize_dim(New_BID,[[BID,X,Y]|DimsBefore],Dims).

direction(0,1).
direction(0,-1).
direction(1,0).
direction(-1,0).


not_cover(BID1,X1,Y1, BID2,X2,Y2):-
	dimension(BID1,W1,H1),
	dimension(BID2,W2,H2),
	(X1>X2+W2-1; X2>X1+W1-1; Y1>Y2+H2-1; Y2>Y1+H1-1).

cover(BID1,X1,Y1, BID2,X2,Y2):-
	dimension(BID1,W1,H1),
	dimension(BID2,W2,H2),
	\+ (X1>X2+W2-1; X2>X1+W1-1; Y1>Y2+H2-1; Y2>Y1+H1-1).

not_go_back(OldBID, OldDX, OldDY, BID, DX, DY):-
	OldBID=\=BID,
	!.
not_go_back(OldBID, OldDX, OldDY, BID, DX, DY):-
	OldDX+DX=\=0,
	!.
not_go_back(OldBID, OldDX, OldDY, BID, DX, DY):-
	OldDY+DY=\=0,
	!.
move(P0, P1, MinStep, NewMinStep, OldBID, OldDX, OldDY, BID, DX, DY, UsedCount, MaxStepCount):-
	room(MaxX,MaxY),
	direction(DX,DY),
	remove([BID,X,Y],P0, Rest),
	%(OldBID=\=BID;OldDX+DX=\=0;OldDY+DY=\=0),
	not_go_back(OldBID, OldDX, OldDY, BID, DX, DY),
	dimension(BID,W,H),
	NewX is X+DX,
	NewY is Y+DY,
	NewX>=0,
	NewY>=0,
	NewX+W-1<MaxX,
	NewY+H-1<MaxY,
	%writeln(BID),
	%writeln('Move'),
	( 
		member(P0,[BID2,X2,Y2]),
		BID2=\=BID,
		cover(BID,NewX,NewY,BID2,X2,Y2)
		->
		fail;
		true
		),
	getMinSteps(BID,X,Y,OldDis),
	getMinSteps(BID,NewX,NewY,NewDis),
	NewMinStep is MinStep-OldDis+NewDis,
	UsedCount+NewMinStep=<MaxStepCount,
	write('Move '),
	write(BID),
	write(' to '),
	write(DX),
	writeln(DY),
	P1=[[BID,NewX,NewY]|Rest].
	
tryStepCount(UsedCount, MaxStepCount,MinStep, Pos, _, _, _):-
	UsedCount=<MaxStepCount,
	target(TargetBID,XX,YY),
	member(Pos,[TargetBID,XX,YY]),
	(
		position(OtherBID,X,Y),
		TargetBID=\=OtherBID,
		\+ member(Pos, [OtherBID,X,Y])
		->
		fail;
		%writeln(Pos),
		true
		),
	!.

tryStepCount(UsedCount, MaxStepCount, MinStep, Pos, OldBID, OldDX, OldDY):-
	UsedCount+MinStep=<MaxStepCount,
	NewUsedCount is UsedCount+1,
	write('---'),
	writeln(NewUsedCount),
	move(Pos, NewPos, MinStep, NewMinStep, OldBID, OldDX, OldDY, BID, DX, DY, NewUsedCount, MaxStepCount),
	tryStepCount(NewUsedCount, MaxStepCount, NewMinStep, NewPos, BID, DX, DY).


main(StepCountNow, MinStepCount):-
	writeln(StepCountNow),
	(
		horizon(MaxCount),
		StepCountNow>MaxCount
		->
		fail;
		initialize_pos(1,[],InitPos),
		target(TargetBID,_,_),
		position(TargetBID,InitX,InitY),
		getMinSteps(TargetBID,InitX,InitY,InitMinStep),
		(	
			tryStepCount(0,StepCountNow,InitMinStep,InitPos, 0, 0, 0)
			->
			MinStepCount is StepCountNow;
			NewStep is StepCountNow+1,
			main(NewStep, MinStepCount)
		)
	).


%getMinSteps(OtherDis, Pos, TargetBID):-
%	position(OtherBID,X0,Y0),
%	member(Pos,[OtherBID,X1,Y1]),
%	OtherBID=\=TargetBID,
%	(X0>X1->OtherDisX is X0-X1;OtherDisX is X1-X0),
%	(Y0>Y1->OtherDisY is Y0-Y1;OtherDisY is Y1-Y0),
%	OtherDis is OtherDisX+OtherDisY.

getMinSteps(BID,X0,Y0,Dis):-
	(
		target(BID,X1,Y1)
		->
		true;
		position(BID,X1,Y1)
	),
	(X0>X1->DisX is X0-X1;DisX is X1-X0),
	(Y0>Y1->DisY is Y0-Y1;DisY is Y1-Y0),
	Dis is DisX+DisY.

